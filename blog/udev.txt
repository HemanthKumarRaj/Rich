udev 详解
如果你使用Linux比较长时间了，那你就知道，在对待设备文件这块，Linux改变了几次策略。在Linux早期，设备文件仅仅是是一些带有适当的属性 集的普通文件，它由mknod命令创建，文件存放在/dev目录下。后来，采用了devfs,一个基于内核的动态设备文件系统，他首次出现在2.3.46 内核中。Mandrake，Gentoo等Linux分发版本采用了这种方式。devfs创建的设备文件是动态的。但是devfs有一些严重的限制，从 2.6.13版本后移走了。目前取代他的便是文本要提到的udev－－一个用户空间程序。

目前很多的Linux分发版本采纳了udev的方式，因为它在Linux设备访问，特别是那些对设备有极端需求的站点（比如需要控制上千个硬盘）和热插拔 设备（比如USB摄像头和MP3播放器）上解决了几个问题。下面我我们来看看如何管理udev设备。

实际上，对于那些为磁盘，终端设备等准备的标准配置文件而言，你不需要修改什么。但是，你需要了解udev配置来使用新的或者外来设备，如果不修改配置， 这些设备可能无法访问，或者说Linux可能会采用不恰当的名字，属组或权限来创建这些设备文件。你可能也想知道如何修改RS－232串口，音频设备等文 件的属组或者权限。这点在实际的Linux实施中是会遇到的。


为什么使用udev

在此之前的设备文件管理方法（静态文件和devfs）有几个缺点：

* 不确定的设备映射。特别是那些动态设备，比如USB设备，设备文件到实际设备的映射并不可靠和确定。举一个例子：如果你有两个USB打印机。一个可能称为 /dev/usb/lp0,另外一个便是/dev/usb/lp1。但是到底哪个是哪个并不清楚，lp0,lp1和实际的设备没有一一对应的关系，因为他 可能因为发现设备的顺序，打印机本身关闭等原因而导致这种映射并不确定。理想的方式应该是：两个打印机应该采用基于他们的序列号或者其他标识信息的唯一设 备文件来映射。但是静态文件和devfs都无法做到这点。

*没有足够的主/辅设备号。我们知道，每一个设备文件是有两个8位的数字：一个是主设备号 ，另外一个是辅设备号来分配的。这两个8位的数字加上设备类型（块设备或者字符设备）来唯一标识一个设备。不幸的是，关联这些身边的的数字并不足够。

*/dev目录下文件太多。一个系统采用静态设备文件关联的方式，那么这个目录下的文件必然是足够多。而同时你又不知道在你的系统上到底有那些设备文件是激活的。

*命名不够灵活。尽管devfs解决了以前的一些问题，但是它自身又带来了一些问题。其中一个就是命名不够灵活；你别想非常简单的就能修改设备文件的名 字。缺省的devfs命令机制本身也很奇怪，他需要修改大量的配置文件和程序。;

*内核内存使用，devfs特有的另外一个问题是，作为内核驱动模块，devfs需要消耗大量的内存，特别当系统上有大量的设备时（比如上面我们提到的系统一个上有好几千磁盘时）

udev的目标是想解决上面提到的这些问题，他通采用用户空间(user-space)工具来管理/dev/目录树，他和文件系统分开。知道如何改变缺省 配置能让你之大如何定制自己的系统，比如创建设备字符连接，改变设备文件属组，权限等。

udev配置文件

主要的udev配置文件是/etc/udev/udev.conf。这个文件通常很短，他可能只是包含几行#开头的注释，然后有几行选项：

udev_root="/dev/"

udev_rules="/etc/udev/rules.d/"

udev_log="err"

上面的第二行非常重要，因为他表示udev规则存储的目录，这个目录存储的是以.rules结束的文件。每一个文件处理一系列规则来帮助udev分配名字给设备文件以保证能被内核识别。
你的/etc/udev/rules.d下面可能有好几个udev规则文件，这些文件一部分是udev包安装的，另外一部分则是可能是别的硬件或者软件包 生成的。比如在Fedora Core 5系统上，sane-backends包就会安装60-libsane.rules文件，另外initscripts包会安装60-net.rules文 件。这些规则文件的文件名通常是两个数字开头，它表示系统应用该规则的顺序。

规则文件里的规则有一系列的键/值对组成，键/值对之间用逗号(,)分割。每一个键或者是用户匹配键，或者是一个赋值键。匹配键确定规则是否被应用，而赋 值键表示分配某值给该键。这些值将影响udev创建的设备文件。赋值键可以处理一个多值列表。匹配键和赋值键操作符解释见下表：


                       udev 键/值对操作符
操作符     匹配或赋值t                         解释
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
==            匹配              相等比较
!=            匹配             不等比较
=            赋值              分配一个特定的值给该键，他可以覆盖之前的赋值。
+=      赋值              追加特定的值给已经存在的键
:=            赋值                  分配一个特定的值给该键，后面的规则不可能覆盖它。


这有点类似我们常见的编程语言，比如C语言。只是这里的键一次可以处理多个值。有一些键在udev规则文件里经常出现，这些键的值可以使用通配符(*,?,甚至范围，比如[0-9])，这些常用键列举如下：


常用udev键
键        含义
ACTION         一个时间活动的名字，比如add，当设备增加的时候
KERNEL         在内核里看到的设备名字，比如sd*表示任意SCSI磁盘设备
DEVPATH       内核设备录进，比如/devices/*
SUBSYSTEM       子系统名字，比如sound,net
BUS         总线的名字，比如IDE,USB
DRIVER         设备驱动的名字，比如ide-cdrom
ID           独立于内核名字的设备名字
SYSFS{ value}       sysfs属性值，他可以表示任意
ENV{ key}       环境变量，可以表示任意
PROGRAM       可执行的外部程序，如果程序返回0值，该键则认为为真(true)
RESULT         上一个PROGRAM调用返回的标准输出。
NAME         根据这个规则创建的设备文件的文件名。注意：仅仅第一行的NAME描述是有效的，后面的均忽略。
                                  如果你想使用使用两个以上的名字来访问一个设备的话，可以考虑SYMLINK键。
SYMLINK       根据规则创建的字符连接名
OWNER         设备文件的属组
GROUP         设备文件所在的组。
MODE         设备文件的权限，采用8进制
RUN         为设备而执行的程序列表
LABEL         在配置文件里为内部控制而采用的名字标签(下下面的GOTO服务)
GOTO         跳到匹配的规则（通过LABEL来标识），有点类似程序语言中的GOTO
IMPORT{ type}     导入一个文件或者一个程序执行后而生成的规则集到当前文件
WAIT_FOR_SYSFS   等待一个特定的设备文件的创建。主要是用作时序和依赖问题。
PTIONS         特定的选项： last_rule 对这类设备终端规则执行； ignore_device 忽略当前规则； ignore_remove 忽略接下来的并移走请求。
           all_partitions 为所有的磁盘分区创建设备文件。


我们给出一个列子来解释如何使用这些键。下面的例子来自Fedora Core 5系统的标准配置文件。

KERNEL=="*", OWNER="root" GROUP="root", MODE="0600"
KERNEL=="tty", NAME="%k", GROUP="tty", MODE="0666", OPTIONS="last_rule"
KERNEL=="scd[0-9]*", SYMLINK+="cdrom cdrom-%k"
KERNEL=="hd[a-z]", BUS=="ide", SYSFS{removable}=="1", SYSFS{device/media}=="cdrom", SYMLINK+="cdrom cdrom-%k"
ACTION=="add", SUBSYSTEM=="scsi_device", RUN+="/sbin/modprobe sg"

上面的例子给出了5个规则，每一个都是KERNEL或者ACTION键开头：

*第一个规则是缺省的，他匹配任意被内核识别到的设备，然后设定这些设备的属组是root，组是root，访问权限模式是0600(-rw------ -)。这也是一个安全的缺省设置保证所有的设备在默认情况下只有root可以读写。
*第二个规则也是比较典型的规则了。它匹配终端设备(tty)，然后设置新的权限为0600，所在的组是tty。它也设置了一个特别的设备文件名:%K。 在这里例子里，%k代表设备的内核名字。那也就意味着内核识别出这些设备是什么名字，就创建什么样的设备文件名。

*第三行开始的KERNEL=="scd[0-9]*",表示 SCSI CD-ROM 驱动. 它创建一对设备符号连接：cdrom和cdrom-%k。

*第四行，开始的 KERNEL=="hd[a-z]", 表示ATA CDROM驱动器。这个规则创建和上面的规则相同的符号连接。ATA CDROM驱动器需要sysfs值以来区别别的ATA设备，因为SCSI CDROM可以被内核唯一识别。.

*第五行以 ACTION=="add"开始，它告诉udev增加 /sbin/modprobe sg 到命令列表，当任意SCSI设备增加到系统后，这些命令将执行。其效果就是计算机应该会增加sg内核模块来侦测新的SCSI设备。

当然，上面仅仅是一小部分例子，如果你的系统采用了udev方式，那你应该可以看到更多的规则。如果你想修改设备的权限或者创建信的符号连接，那么你需要熟读这些规则，特别是要仔细注意你修改的那些与之相关的设备。

修改你的udev配置

在修改udev配置之前，我们一定要仔细，通常的考虑是：你最好不要修改系统预置的那些规则，特别不要指定影响非常广泛的配置，比如上面例子中的第一行。 不正确的配置可能会导致严重的系统问题或者系统根本就无法这个正确的访问设备。

而我们正确的做法应该是在/etc/udev/rules.d/下创建一个信的规则文件。确定你给出的文件的后缀是rules文件名给出的数字序列应该比 标准配置文件高。比如，你可以创建一个名为99-my-udev.rules的规则文件。在你的规则文件中，你可以指定任何你想修改的配置，比如，假设你 修改修改floppy设备的所在组，还准备创建一个信的符号连接/dev/floppy，那你可以这么写：
KERNEL=="fd[0-9]*", GROUP="users",   SYMLINK+="floppy"


有些发行版本，比如Fedora，采用了外部脚本来修改某些特定设备的属组，组关系和权限。因此上面的改动可能并不见得生效。如果你遇到了这个问题，你就 需要跟踪和修改这个脚本来达到你的目的。或者你可以修改PROGRAM或RUN键的值来做到这点。

某些规则的修改可能需要更深的挖掘。比如，你可能想在一个设备上使用sysfs信息来唯一标识一个设备。这些信息最好通过udevinfo命令来获取。
$ udevinfo ?a ?p $(udevinfo ?q path ?n /dev/hda)

上面的命令两次使用udevinfo：一次是返回sysfs设备路径(他通常和我们看到的Linux设备文件名所在路径－－/dev/hda－－不同)； 第二次才是查询这个设备路径，结果将是非常常的syfs信息汇总。你可以找到最够的信息来唯一标志你的设备，你可以采用适当的替换udev配置文件中的 SYSFS选项。下面的结果就是上面的命令输出

[root@localhost rules.d]# udevinfo -a -p $(udevinfo -q path    -n /dev/hda1)

Udevinfo starts with the device specified by the devpath and then
walks up the chain of parent devices. It prints for every device
found, all possible attributes in the udev rules key format.
A rule to match, can be composed by the attributes of the device
and the attributes from one single parent device.

looking at device '/block/hda/hda1':
   KERNEL=="hda1"
   SUBSYSTEM=="block"
   DRIVER==""
   ATTR{stat}=="    1133     2268        2        4"
   ATTR{size}=="208782"
   ATTR{start}=="63"
   ATTR{dev}=="3:1"

looking at parent device '/block/hda':
   KERNELS=="hda"
   SUBSYSTEMS=="block"
   DRIVERS==""
   ATTRS{stat}=="   28905    18814 1234781   302540    34087   133247   849708   981336        0   218340 1283968"
   ATTRS{size}=="117210240"
   ATTRS{removable}=="0"
   ATTRS{range}=="64"
   ATTRS{dev}=="3:0"

looking at parent device '/devices/pci0000:00/0000:00:1f.1/ide0/0.0':
   KERNELS=="0.0"
   SUBSYSTEMS=="ide"
   DRIVERS=="ide-disk"
   ATTRS{modalias}=="ide:m-disk"
   ATTRS{drivename}=="hda"
   ATTRS{media}=="disk"

looking at parent device '/devices/pci0000:00/0000:00:1f.1/ide0':
   KERNELS=="ide0"
   SUBSYSTEMS==""
   DRIVERS==""

looking at parent device '/devices/pci0000:00/0000:00:1f.1':
   KERNELS=="0000:00:1f.1"
   SUBSYSTEMS=="pci"
   DRIVERS=="PIIX_IDE"
   ATTRS{broken_parity_status}=="0"
   ATTRS{enable}=="1"
   ATTRS{modalias}=="pci:v00008086d000024CAsv0000144Dsd0000C009bc01sc01i8a"
   ATTRS{local_cpus}=="1"
   ATTRS{irq}=="11"
   ATTRS{class}=="0x01018a"
   ATTRS{subsystem_device}=="0xc009"
   ATTRS{subsystem_vendor}=="0x144d"
   ATTRS{device}=="0x24ca"
   ATTRS{vendor}=="0x8086"

looking at parent device '/devices/pci0000:00':
   KERNELS=="pci0000:00"
   SUBSYSTEMS==""
   DRIVERS==""


举一个例子：假设你想修改USB扫描仪的配置。通过一系列的尝试，你已经为这个扫描仪标识了Linux设备文件(每次打开扫描仪时，名字都会变)。你可以 使用上面的命令替换这个正确的Linux设备文件名，然后定位输出的采用SYSFS{idVendor}行和SYSFS{idProduct}行。最后你 可以使用这些信息来为这个扫描仪创建新的选项。


SYSFS{idVendor}=="0686", \

SYSFS{idProduct}=="400e", \

SYMLINK+="scanner", MODE="0664", \

group="scanner"

上面的例子表示将扫描仪的组设置为scanner，访问权限设置为0664,同时创建一个/dev/scanner的符号连接。

Udev
From ArchWiki
注意: 如果您是从DevFS升级到Udev, 请查看 DevFS to Udev.

这篇文档将介绍udev的一些新的变化。从084版开始，udev能够代替hotplug和coldplug的所有功能。正因为这样，hotplug包已经从Arch仓库中去掉了。
Contents
[hide]

    * 1 重要提示
    * 2 基本需求
    * 3 最近更新
    * 4 模块禁用列表
    * 5 load_modules: 有用的启动参数
    * 6 已知的硬件问题
    * 7 自动加载带来的一些问题
          o 7.1 CPUFreq模块
          o 7.2 声音问题和一些不能自动加载的模块
          o 7.3 多个同类型设备（网卡，声卡）每次启动的都不同
    * 8 自己编译内核造成的一些已知问题
          o 8.1 Udev无法启动
          o 8.2 CD/DVD符号和权限错误
    * 9 Udev小窍门
          o 9.1 自动加载usb设备

重要提示

...切记，在使用udev加载任何modules（内核模块）之前（无论是否是启动时自动加载），您必须在/etc/rc.conf将 MOD_AUTOLOAD选项设置为yes ，否则您必须手动加载这些modules。您可以修改rc.conf中的MODULES或者使用modprobe命令来手动加载您所需要的 modules。另一种方法是用hwdetect --modules生成系统硬件的modules列表，然后将这个列表添加到rc.conf中让系统启动时自动加载这些modules。

基本需求

    * 内核: 2.6.15或更高版本。
    * 您将无法在fstab和bootloader设置中再使用DevFS格式的设备名称! 更多相关内容请查看DevFS to Udev。

最近更新

    * startudev程序被取出。如果需要重新加载udev规则请使用 /etc/start_udev。
    * Udev代替了hotplug和hwdetect的功能。同时我们保存了hwdetect，并且只在 mkinitrd程序生成initrd的时候用到。
    * Udev可以同时加载多个模块，这样可以加快启动速度，然而，这样做的结果是她不能保证每次加载的顺序，所以当你使用多声卡或网卡的时候就会出现问题，这个问题下面将会再讨论。

模块禁用列表

udev也会犯错或加载错误的模块。为了防止错误的发生，你可以使用模块禁用列表 。一旦加入该列表的模块，无论是启动时，或者时运行时（如usb硬盘等）udev都不会加载这些模块。

只需在您在 rc.conf的MODULES中对应模块前加上感叹号（!）就可禁用该模块。

例如,

MODULES=(!moduleA !moduleB)

load_modules: 有用的启动参数

如果您在内核启动参数中加入load_modules=off，那么udev会停止任何自动加载工作. 如果系统出现问题时，这个功能会十分有用。如果udev加载了有问题的模块导致系统挂起或者其它严重的问题时，你可以使用这个参数来禁用自动加载，以此来 防止加载有问题的模块。

已知的硬件问题

- BusLogic设备被损坏而且导致启动时死机。

这是一个内核的Bug目前还没有修正。

- PCMCIA读卡器被认为是可移除设备.

把它们加入到/etc/pmount.allow中，使用hal的pmount来读取

自动加载带来的一些问题

CPUFreq模块

我门还没有找到一个很好的方法加载不同的CPUFreq控制器，所以我们把从自动加载进程里把它去掉了。如果您需要测量CPU频率，你必须在rc.conf的MODULES队列中显式的加入合适的模块。

声音问题和一些不能自动加载的模块

一些用户跟踪发现问题出在/etc/modprobe.conf中一些旧的部分，试着去掉这些旧的部分再试试看。
多个同类型设备（网卡，声卡）每次启动的都不同

因为udev同时加载所有模块，所以一些设备可能初始化顺序不同。例如同时有两个网卡时，它们总是在eth0和eth1之间变来变去。

常用的解决办法是在您的rc.conf文件中通过修改MODULES队列来指明顺序。这个队列里的模块将在udev自动加载之前由系统加载，因此您可以控制模块在启动时加载顺序。

# 在e100之前加载8139too
MODULES=(8139too e100)

另一个解决网卡的方法是使用udev-sanctified方法为每个网卡静态命名。创建文件/etc/udev/rules.d/10-network.rules然后将不同的网卡通过MAC地址绑定到不同的名字上：

SUBSYSTEM=="net", SYSFS{address}=="aa:bb:cc:dd:ee:ff", NAME="lan0"
SUBSYSTEM=="net", SYSFS{address}=="ff:ee:dd:cc:bb:aa", NAME="wlan0"

同时，您需要注意以下内容:

    * 您可以通过下面的命令获得网卡的MAC地址:: udevinfo -a -p /sys/class/net/<你的网卡>
    * 注意在udev规则文件中使用小写的16进制MAC地址，因为udev无法识别大写的MAC地址。
    * 一些用户在使用旧的命名方式时出现问题，例如: eth0, eth1, 等等. 如果出现这个问题，试试使用 "lan"或者"wlan"之类的名字.

注意不要忘记修改您的/dec/rc.conf和其它使用ethX命名的配置文件。

自己编译内核造成的一些已知问题

Udev无法启动

请确定您的内核版本大于或等于2.6.15。较早的内核没有udev自动装载所需要的uevent功能。

CD/DVD符号和权限错误

如果您使用2.6.15的内核的话，您需要安装ABS的uevent补丁（它从2.6.16内核中抽取了一些uevent功能）。您可以使用abs命令来 同步ABS树，然后您就可以在/var/abs/kernels/kernel26/下找到abs补丁。

Udev小窍门

自动加载usb设备

KERNEL=="sd[a-z]", NAME="%k", SYMLINK+="usb%m", GROUP="users", OPTIONS="last_rule"
ACTION=="add", KERNEL=="sd[a-z][0-9]", SYMLINK+="usb%n", GROUP="users", NAME="%k"
ACTION=="add", KERNEL=="sd[a-z][0-9]", RUN+="/bin/mkdir -p /mnt/usb%n"
ACTION=="add", KERNEL=="sd[a-z][0-9]", PROGRAM=="/lib/udev/vol_id -t %N", RESULT=="vfat", RUN+="/bin/mount -t vfat -o rw,noauto,sync,dirsync,noexec,nodev,noatime,dmask=000,fmask=111 /dev/%k /mnt/usb%n", OPTIONS="last_rule"
ACTION=="add", KERNEL=="sd[a-z][0-9]", RUN+="/bin/mount -t auto -o rw,noauto,sync,dirsync,noexec,nodev,noatime /dev/%k /mnt/usb%n", OPTIONS="last_rule"
ACTION=="remove", KERNEL=="sd[a-z][0-9]", RUN+="/bin/umount -l /mnt/usb%n"
ACTION=="remove", KERNEL=="sd[a-z][0-9]", RUN+="/bin/rmdir /mnt/usb%n", OPTIONS="last_rule"

把这些udev规则放到/etc/udev/rules.d/下任何一个文件名以.rules结尾的文件中，例如/etc/udev/rules.d/sda.rules。

如果想同时建立/media到/mnt符号连接，可以使用下面的版本:

KERNEL=="sd[a-z]", NAME="%k", SYMLINK+="usbhd-%k", GROUP="users", OPTIONS="last_rule"
ACTION=="add", KERNEL=="sd[a-z][0-9]", SYMLINK+="usbhd-%k", GROUP="users", NAME="%k"
ACTION=="add", KERNEL=="sd[a-z][0-9]", RUN+="/bin/mkdir -p /media/usbhd-%k"
ACTION=="add", KERNEL=="sd[a-z][0-9]", RUN+="/bin/ln -s /media/usbhd-%k /mnt/usbhd-%k"
ACTION=="add", KERNEL=="sd[a-z][0-9]", PROGRAM=="/lib/udev/vol_id -t %N", RESULT=="vfat", RUN+="/bin/mount -t vfat -o rw,noauto,sync,dirsync,noexec,nodev,noatime,dmask=000,fmask=111 /dev/%k /media/usbhd-%k", OPTIONS="last_rule"
ACTION=="add", KERNEL=="sd[a-z][0-9]", RUN+="/bin/mount -t auto -o rw,noauto,sync,dirsync,noexec,nodev,noatime /dev/%k /media/usbhd-%k", OPTIONS="last_rule"
ACTION=="remove", KERNEL=="sd[a-z][0-9]", RUN+="/bin/rm -f /mnt/usbhd-%k"
ACTION=="remove", KERNEL=="sd[a-z][0-9]", RUN+="/bin/umount -l /media/usbhd-%k"
ACTION=="remove", KERNEL=="sd[a-z][0-9]", RUN+="/bin/rmdir /media/usbhd-%k", OPTIONS="last_rule"

注意！如果你是用的其它的固定设备（例如SATA的硬盘，您可以从/etc/fstab中查看）被识别为/dev/sdX，您必须从sd[a-z] 中去掉你的那个sdX。例如，如果您的SATA硬盘被是识别为/dev/sda，您就需要把所有的“sd[a-z]”替换成“sd[b-z]”。在规则文 件的文件名前加上数字（如:010.udev.rules）是个很好的主意，这样udev在读取标准规则前，将会读取这个规则文件。这些规则设置后不需要 修改/etc/fstab文件。请查看mount命令的参数来修改权限等特性（您可以从论坛搜索查看mount命令的参数，然后根据您的需要修改它们）。 







 关于实现udev/mdev自动挂载与卸载
分类： 配置 搭建Linux系统 2012-02-03 11:10 599人阅读 评论(0) 收藏 举报
permissionsregexcommand脚本actiondeprecated

转自：http://blog.csdn.net/czh52911/article/details/6652791

       在网上有很多关于讲mdev的自动挂载基本上都是一个版本，经过测试自动挂载确实可行，但是关于自动卸载mdev似乎不能很好的支持，经过修改已经可以做到与udev的效果相似。不能在挂载的目录中进行热插拔，否则会出现问题，不过此问题在下次插入U盘时不会造成影响，可能对U盘有损坏。

本文介绍了mdev与udev两种方法来实现自动挂载，读者可根据需要任选其一即可。

        首先介绍一下mdev与udev之间的关系：

        mdev是busybox中的一个udev管理程序的一个精简版，他也可以实现设备节点的自动创建和设备的自动挂载，只是在实现的过程中有点差异，在发生热插拔时间的时候，mdev是被hotplug直接调用，这时mdev通过环境变量中的 ACTION 和 DEVPATH，来确定此次热插拔事件的动作以及影响了/sys中的那个目录。接着会看看这个目录中是否有“dev”的属性文件，如果有就利用这些信息为这个设备在/dev 下创建设备节点文件。

 

 

/***********************************************************************************************************************************************************************************/

1.mdev支持

    ①用busybox制作根文件系统的时候，要选择支持mdev机制

        Linux System Utilities  --->   
                   [*] mdev      
                   [*]   Support /etc/mdev.conf
                   [*]     Support command execution at device addition/removal

    ②在文件系统/etc/init.d/rsC文件中添加如下内容

        Vi  /etc/init.d/rcS
                mount -t tmpfs mdev /dev
                mount -t sysfs sysfs /sys
                mkdir /dev/pts
                mount -t devpts devpts /dev/pts

                echo /sbin/mdev>/proc/sys/kernel/hotplug
                mdev ?s

    这些语句的添加在busybox的/doc/mdev.txt中可以找到。

     

    ③添加对热插拔事件的响应，实现U盘和SD卡的自动挂载。

        Vi /etc/mdev.conf
               sd[a-z][0-9]      0:0 666        @/etc/mdev/udisk_insert                        
                 sd[a-z]                   0:0 666          $/etc/mdev/udisk_remove

    红色部分，是一个脚本，脚本内容可以根据我们的需要定制，可以实现挂载，卸载或其他一些功能。

    注：@表示是在插入（创建设备结点）后执行后面的脚本，$表示在拔出（删除设备结点）前执行后面的脚本。

    如下是自动挂载和卸载的脚本名称及其内容：

            #!/bin/sh

            if [ -d /sys/block/*/$MDEV ]  ; then

              mkdir -p /media/$MDEV

              mount /dev/$MDEV /media/$MDEV 

            fi

    根文件系统中的etc/mdev/udisk_remove文件内容:

                #!/bin/sh
                umount -l /media/$MDEV
                rm -rf /media/$MDEV
         
                #!/bin/sh
                umount -l /media/sd*
                rm -rf /media/sd*

    修改为红色部分后能够自动挂载

    以上两个脚本需要可执行权限：chmod +x  /etc/mdev/udisk_insert

                               chmod +x etc/mdev/udisk_remove

/***********************************************************************************************************************************************************************************/

2.udev支持 

        linux传统上使用静态设备创建的方法，在dev下创建了大量的节点，而不管这些节点相应的硬件设备是否存在。采用udev的方法，系统检测到设备才会去创建这些设备对应的节点。

        这里我们简单的说一下udev的工作原理：

        udev是依赖于sysfs的，当系统中添加一个新的设备后，内核检测到后就会产生一个hotplug event并查找/proc/sys/kernel/hotplug去找出管理设备连接的用户空间程序，若udev已经启动，内核会通知udev去检测sysfs中关于这个新设备的信息并创建设备节点。如/dev/vcs,在/sys/class/tty/vcs/dev存放的是”7:0”，既/dev/vcs的主次设备号。并且udev还会根据/etc/udev/rules.d中的规则文件实现一些相应的功能。

下面我们介绍一下如何实现设备节点的自动创建及u盘或sd卡的自动挂载。

    因为文件系统中默认是没有对udev进行支持的，所以我们移植一个udev。

    1.下载udev源码udev-100.tar.bz2，并解压

    网址：http://www.us.kernel.org/pub/linux/utils/kernel/hotplug

    2.交叉编译。

    修改makefile,具体修改如下：

            cross = arm-linux-

    保存退出。

    然后执行命令：make 进行编译，然后执行arm-linux-strip udev udevd udevstart udevinfo udevtest，并拷贝这些文件到目标板根文件/bin目录下面。

    3.添加udev的支持

    下面三种方法功能相同

            (1)并修改etc/init.d/rcs脚本，然后添加如下命令：

            /bin/mount -t sysfs sysfs /sys 

            /bin/mount -t tmpfs tmpfs /dev

            /bin/udevd --daemon

            /bin/udevstart

            (2)如果linuxrc是二进制文件的话 

            rm /linuxrc

            vi /linuxrc

            添加如下内容

            /bin/mount -t sysfs sysfs /sys

            /bin/mount -t tmpfs tmpfs /dev

            /bin/udevd --daemon

            /bin/udevstart

            exec /sbin/init

            (3)修改/etc/fstab为

            #device mount-point type options dump fsck order

            proc /proc proc defaults 0 0

            tmpfs /tmp tmpfs defaults 0 0

            sysfs /sys sysfs defaults 0 0

            tmpfs /dev tmpfs defaults 0 0

            修改/etc/init.d/rcs,添加如下内容

        /bin/udevd --daemon

        /bin/udevstart

            重新启动系统，文件系统就能够自动创建节点。

     

    4.在/etc下创建udev目录

    5.在/etc/udev下穿件目录rules.d和文件udev.conf

    6.在udev.conf中添加如下内容

    # udev.conf

            # the initial syslog(3) priority: "err", "info", "debug" or its

            # numerical equivalent. for runtime debugging, the daemons internal

            # state can be changed with: "udevcontrol log_priority=<value>".

            udev_log="err"

    7.在rules.d下创建规则文件

    如实现u盘自动挂载

            vim 11-add-usb.rules

    添加如下内容

            action!="add",goto="farsight"

            kernel=="sd[a-z][0-9]",run+="/sbin/mount-usb.sh %k"

            label="farsight"

    这个文件中action后是说明是什么事件，kernel后是说明是什么设备比如sda1，mmcblk0p1等，run这个设备插入后去执行哪个程序%k是传入这个程序的参数，这里%k=kernel的值也就是sda1等http://www.woaidiannao.com。

    在/sbin/下创建mount-usb.sh文件添加如下内容 计算机

            #!/bin/sh

            /bin/mount -t vfat /dev/$1 /tmp

            sync

    修改文件权限为其添加可执行的权限。

    这样就实现了u盘的自动挂载，下面附上u盘的卸载规则文件和sd卡的文件

    usb卸载

    11-add-remove.rules

            action !="remove",goto="farsight"

            subsystem!="block",goto="farsight"

            kernel=="sd[a-z][0-9]",run+="/sbin/umount-usb.sh"

            label="farsight"

    umount-usb.sh

            #!/bin/sh

            sync

            umount /tmp/

    sd卡挂载

    12-add-sd.rules

    action!="add",goto="farsight"

            kernel=="mmcblk[0-9]p[0-9]",run+="/sbin/mount-sd.sh %k"

            label="farsight"

    mount-sd.sh

            #!/bin/sh

            /bin/mount -t vfat /dev/$1 /tmp

            sync

     

    sd卸载

    12-remove-sd.rules

            action !="remove",goto="farsight"

            subsystem!="block",goto="farsight"

            kernel=="mmcblk*",run+="/sbin/umount-sd.sh"

            label="farsight"

    umount-sd.sh

            #!/bin/sh

            sync

            /bin/umount /tmp/

=============================================================================================================================================

linux嵌入式系统中mdev的配置
转自：http://blog.csdn.net/guojiuming/article/details/6141978

1、mdev是什么。

busybox的mdev是一个精简了的udev管理程序，而udev是linux2.6内核引入的一种新的设备文件管理机制，用于取代老的devfs.udev最大的有点就是可以动态的管理/dev目录下的设备文件，而不用再系统初始化时就将可能要用到的设备都创建起来，还可以根据设备具体信息命名设备节点，而不是有内核统一分配。

 

2、如何在嵌入式系统中开启mdev。

  1）在busybox中添加对mdev的支持。

 

  2）在/etc/rc.d/rcS中添加

  #在/sys中挂载sysfs文件系统，它是mdev运行的基础条件之一

  mount -t sysfs sysfs /sys

 

  #设置系统的hotplug程序为mdev

  echo /sbin/mdev > /proc/sys/kernel/hotplug  

  

  #mdev程序检索/sys和/proc中文件系统的设备信息，在/dev中生成相应的设备节点

  mdev ?s

 

 

 

  3）确保编译内核时编译如下选项：

  CONFIG_PROC_FS=y

  CONFIG_PROC_SYSCTL=y

  CONFIG_HOTPLUG=y

  CONFIG_NET=y

 

  注：根据udev官方文件的介绍(http://git.kernel.org/?p=linux/hotplug/udev.git;a=blob;hb=HEAD;f=README)，编译udev需要配置如下选项；最好采用2.6.27及其以后版本。

  CONFIG_HOTPLUG=y
  CONFIG_UEVENT_HELPER_PATH=""
  CONFIG_NET=y
  CONFIG_UNIX=y
  CONFIG_SYSFS=y
  CONFIG_SYSFS_DEPRECATED*=n
  CONFIG_PROC_FS=y
  CONFIG_TMPFS=y
  CONFIG_INOTIFY_USER=y
  CONFIG_SIGNALFD=y
  CONFIG_TMPFS_POSIX_ACL=y (user ACLs for device nodes)
  CONFIG_BLK_DEV_BSG=y (SCSI devices)
 
  4）建立/etc/uedv/udev.conf文件，一般定义如下几个参数：

udev_root：udev 产生的设备所存放的目录，默认值是 /dev/。建议不要修改该参数，因为很多应用程序默认会从该目录调用设备文件。
udev_db：udev 信息存放的数据库或者所在目录，默认值是 /dev/.udev.tdb。
udev_rules：udev 规则文件的名字或者所在目录，默认值是 /etc/udev/rules.d/。
udev_permissions：udev 权限文件的名字或者所在目录，默认值是 /etc/udev/permissions.d/。
default_mode/ default_owner/ default_group：如果设备文件的权限没有在权限文件里指定，就使用该参数作为默认权限，默认值分别是：0600/root/root。
udev_log：是否需要 syslog记录 udev 日志的开关，默认值是 no。

  

  5)在/etc/udev/rules.d/目录下建立需要的规则文件*.rules，mdev会自动搜索这些文件内容，最终得到设备节点的名称、权限等。关于规则文件的如何撰写，请参见“跟我一起写udev规则” 一文。

 

      

 
  

 

执行mdev -s ：以‘-s’为参数调用位于 /sbin目录写的mdev（其实是个链接，作用是传递参数给/bin目录下的busybox程序并调用它），mdev扫描 /sys/class 和 /sys/block 中所有的类设备目录，如果在目录中含有名为“dev”的文件，且文件中包含的是设备号，则mdev就利用这些信息为这个设备在/dev 下创建设备节点文件。一般只在启动时才执行一次 “mdev -s”。

 

热插拔事件：由于启动时运行了命令：echo /sbin/mdev > /proc/sys/kernel/hotplug ，那么当有热插拔事件产生时，内核就会调用位于 /sbin目录的mdev。这时mdev通过环境变量中的 ACTION 和 DEVPATH，来确定此次热插拔事件的动作以及影响了/sys中的那个目录。接着会看看这个目录中是否有“dev”的属性文件，如果有就利用这些信息为这个设备在/dev 下创建设备节点文件。


==================================================================================================================================================

mdev.txt

-------------
 MDEV Primer
-------------

For those of us who know how to use mdev, a primer might seem lame.  For
everyone else, mdev is a weird black box that they hear is awesome, but can't
seem to get their head around how it works.  Thus, a primer.

-----------
 Basic Use
-----------

Mdev has two primary uses: initial population and dynamic updates.  Both
require sysfs support in the kernel and have it mounted at /sys.  For dynamic
updates, you also need to have hotplugging enabled in your kernel.

Here's a typical code snippet from the init script:
[0] mount -t proc proc /proc
[1] mount -t sysfs sysfs /sys
[2] echo /bin/mdev > /proc/sys/kernel/hotplug
[3] mdev -s

Alternatively, without procfs the above becomes:
[1] mount -t sysfs sysfs /sys
[2] sysctl -w kernel.hotplug=/bin/mdev
[3] mdev -s


Of course, a more "full" setup would entail executing this before the previous
code snippet:
[4] mount -t tmpfs -o size=64k,mode=0755 tmpfs /dev
[5] mkdir /dev/pts
[6] mount -t devpts devpts /dev/pts

The simple explanation here is that [1] you need to have /sys mounted before
executing mdev.  Then you [2] instruct the kernel to execute /bin/mdev whenever
a device is added or removed so that the device node can be created or
destroyed.  Then you [3] seed /dev with all the device nodes that were created
while the system was booting.

For the "full" setup, you want to [4] make sure /dev is a tmpfs filesystem
(assuming you're running out of flash).  Then you want to [5] create the
/dev/pts mount point and finally [6] mount the devpts filesystem on it.

-------------
 MDEV Config   (/etc/mdev.conf)
-------------

Mdev has an optional config file for controlling ownership/permissions of
device nodes if your system needs something more than the default root/root
660 permissions.

The file has the format:
    <device regex>       <uid>:<gid> <octal permissions>
 or @<maj[,min1[-min2]]> <uid>:<gid> <octal permissions>

For example:
    hd[a-z][0-9]* 0:3 660

The config file parsing stops at the first matching line.  If no line is
matched, then the default of 0:0 660 is used.  To set your own default, simply
create your own total match like so:
    .* 1:1 777

You can rename/move device nodes by using the next optional field.
    <device regex> <uid>:<gid> <octal permissions> [=path]
So if you want to place the device node into a subdirectory, make sure the path
has a trailing /.  If you want to rename the device node, just place the name.
    hda 0:3 660 =drives/
This will move "hda" into the drives/ subdirectory.
    hdb 0:3 660 =cdrom
This will rename "hdb" to "cdrom".

Similarly, ">path" renames/moves the device but it also creates
a direct symlink /dev/DEVNAME to the renamed/moved device.

If you also enable support for executing your own commands, then the file has
the format:
    <device regex> <uid>:<gid> <octal permissions> [=path] [@|$|*<command>]
    or
    <device regex> <uid>:<gid> <octal permissions> [>path] [@|$|*<command>]
The special characters have the meaning:
    @ Run after creating the device.
    $ Run before removing the device.
    * Run both after creating and before removing the device.

The command is executed via the system() function (which means you're giving a
command to the shell), so make sure you have a shell installed at /bin/sh.  You
should also keep in mind that the kernel executes hotplug helpers with stdin,
stdout, and stderr connected to /dev/null.

For your convenience, the shell env var $MDEV is set to the device name.  So if
the device "hdc" was matched, MDEV would be set to "hdc".

----------
 FIRMWARE
----------

Some kernel device drivers need to request firmware at runtime in order to
properly initialize a device.  Place all such firmware files into the
/lib/firmware/ directory.  At runtime, the kernel will invoke mdev with the
filename of the firmware which mdev will load out of /lib/firmware/ and into
the kernel via the sysfs interface.  The exact filename is hardcoded in the
kernel, so look there if you need to know how to name the file in userspace.

------------
 SEQUENCING
------------

Kernel does not serialize hotplug events. It increments SEQNUM environmental
variable for each successive hotplug invocation. Normally, mdev doesn't care.
This may reorder hotplug and hot-unplug events, with typical symptoms of
device nodes sometimes not created as expected.

However, if /dev/mdev.seq file is found, mdev will compare its
contents with SEQNUM. It will retry up to two seconds, waiting for them
to match. If they match exactly (not even trailing '\n' is allowed),
or if two seconds pass, mdev runs as usual, then it rewrites /dev/mdev.seq
with SEQNUM+1.

IOW: this will serialize concurrent mdev invocations.

If you want to activate this feature, execute "echo >/dev/mdev.seq" prior to
setting mdev to be the hotplug handler. This writes single '\n' to the file.
NB: mdev recognizes /dev/mdev.seq consisting of single '\n' characher
as a special case. IOW: this will not make your first hotplug event
to stall for two seconds.






使用 udev 高效、动态地管理 Linux 设备文件

概述：

Linux 用户常常会很难鉴别同一类型的设备名，比如 eth0, eth1, sda, sdb 等等。通过观察这些设备的内核设备名称，用户通常能知道这些是什么类型的设备，但是不知道哪一个设备是他们想要的。例如，在一个充斥着本地磁盘和光纤磁盘的设备名清单 (/dev/sd*) 中，用户无法找到一个序列号为“35000c50000a7ef67”的磁盘。在这种情况下，udev 就能动态地在 /dev目录里产生自己想要的、标识性强的设备文件或者设备链接，以此帮助用户方便快捷地找到所需的设备文件。

udev 简介

什么是 udev?

udev 是 Linux2.6 内核里的一个功能，它替代了原来的 devfs，成为当前 Linux 默认的设备管理工具。udev 以守护进程的形式运行，通过侦听内核发出来的 uevent 来管理 /dev目录下的设备文件。不像之前的设备管理工具，udev 在用户空间 (user space) 运行，而不在内核空间 (kernel space) 运行。

使用 udev 的好处：

我们都知道，所有的设备在 Linux 里都是以设备文件的形式存在。在早期的 Linux 版本中，/dev目录包含了所有可能出现的设备的设备文件。很难想象 Linux 用户如何在这些大量的设备文件中找到匹配条件的设备文件。现在 udev 只为那些连接到 Linux 操作系统的设备产生设备文件。并且 udev 能通过定义一个 udev 规则 (rule) 来产生匹配设备属性的设备文件，这些设备属性可以是内核设备名称、总线路径、厂商名称、型号、序列号或者磁盘大小等等。

    动态管理：当设备添加 / 删除时，udev 的守护进程侦听来自内核的 uevent，以此添加或者删除 /dev下的设备文件，所以 udev 只为已经连接的设备产生设备文件，而不会在 /dev下产生大量虚无的设备文件。
    自定义命名规则：通过 Linux 默认的规则文件，udev 在 /dev/ 里为所有的设备定义了内核设备名称，比如 /dev/sda、/dev/hda、/dev/fd等等。由于 udev 是在用户空间 (user space) 运行，Linux 用户可以通过自定义的规则文件，灵活地产生标识性强的设备文件名，比如 /dev/boot_disk、/dev/root_disk、/dev/color_printer等等。
    设定设备的权限和所有者 / 组：udev 可以按一定的条件来设置设备文件的权限和设备文件所有者 / 组。在不同的 udev 版本中，实现的方法不同，在“如何配置和使用 udev”中会详解。

下面的流程图显示 udev 添加 / 删除设备文件的过程。

图 1. udev 工作流程图：
图 1. udev 工作流程图：

相关术语：

    设备文件：由于本文以较通俗的方式讲解 udev，所以设备文件是泛指在 /dev/下，可被应用程序用来和设备驱动交互的文件。而不会特别地区分设备文件、设备节点或者设备特殊文件。
    devfs：devfs是 Linux 早期的设备管理工具，已经被 udev 取代。
    sysfs：sysfs是 Linux 2.6 内核里的一个虚拟文件系统 (/sys)。它把设备和驱动的信息从内核的设备模块导出到用户空间 (userspace)。从该文件系统中，Linux 用户可以获取很多设备的属性。
    devpath：本文的 devpath是指一个设备在 sysfs文件系统 (/sys)下的相对路径，该路径包含了该设备的属性文件。udev 里的多数命令都是针对 devpath操作的。例如：sda的 devpath是 /block/sda，sda2 的 devpath是 /block/sda/sda2。
    内核设备名称：设备在 sysfs里的名称，是 udev 默认使用的设备文件名。

回页首

如何配置和使用 udev

下面会以 RHEL4.8 和 RHEL5.3 为平台，分别描述 udev 的配置和使用：

下载和安装 udev

从 Fedora3 和 Red Hat Enterprise4 开始，udev 就是默认的设备管理工具，无需另外下载安装。

清单 1. 检查 udev 在 RHEL4.8 里的版本和运行情况

                
 [root@HOST_RHEL4 dev]# rpm -qa |grep -i udev 
 udev-039-10.29.el4 
 [root@HOST_RHEL4 ~]# uname -r 
 2.6.9-89.ELsmp 
 [root@HOST_RHEL4 ~]# ps -ef |grep udev 
 root     21826     1  0 Dec09 ?        00:00:00 udevd 



清单 2. 检查 udev 在 RHEL5.3 里的版本和运行情况

                
 [root@HOST_RHEL5 ~]# rpm -qa |grep -i udev 
 udev-095-14.19.el5 
 [root@HOST_RHEL5 sysconfig]# uname -r 
 2.6.18-128.el5 
 [root@HOST_RHEL5 sysconfig]# ps -ef|grep udev 
 root      5466     1  0 18:32 ?      00:00:00 /sbin/udevd -d 


如果 Linux 用户想更新 udev 包，可以从 http://www.kernel.org/pub/linux/utils/kernel/hotplug/下载并安装。

udev 的配置文件 (/etc/udev/udev.conf)

清单 3. RHEL ４ . ８下 udev 的配置文件

                
 [root@HOST_RHEL4 dev]# cat /etc/udev/udev.conf 
 # udev.conf 
 # The main config file for udev 
 # 
 # This file can be used to override some of udev's default values 
 # for where it looks for files, and where it places device nodes. 
 # 
 # WARNING: changing any value, can cause serious system breakage! 
 # 

 # udev_root - where in the filesystem to place the device nodes 
 udev_root="/dev/"

 # udev_db - The name and location of the udev database. 
 udev_db="/dev/.udev.tdb"

 # udev_rules - The name and location of the udev rules file 
 udev_rules="/etc/udev/rules.d/"

 # udev_permissions - The name and location of the udev permission file 
 udev_permissions="/etc/udev/permissions.d/"

 # default_mode - set the default mode for all nodes that have no 
 #                explicit match in the permissions file 
 default_mode="0600"

 # default_owner - set the default owner for all nodes that have no 
 #                 explicit match in the permissions file 
 default_owner="root"

 # default_group - set the default group for all nodes that have no 
 #                 explicit match in the permissions file 
 default_group="root"

 # udev_log - set to "yes" if you want logging, else "no"
 udev_log="no"


Linux 用户可以通过该文件设置以下参数：

    udev_root：udev 产生的设备所存放的目录，默认值是 /dev/。建议不要修改该参数，因为很多应用程序默认会从该目录调用设备文件。
    udev_db：udev 信息存放的数据库或者所在目录，默认值是 /dev/.udev.tdb。
    udev_rules：udev 规则文件的名字或者所在目录，默认值是 /etc/udev/rules.d/。
    udev_permissions：udev 权限文件的名字或者所在目录，默认值是 /etc/udev/permissions.d/。
    default_mode/ default_owner/ default_group：如果设备文件的权限没有在权限文件里指定，就使用该参数作为默认权限，默认值分别是：0600/root/root。
    udev_log：是否需要 syslog记录 udev 日志的开关，默认值是 no。


清单 4. RHEL5.3 下 udev 的配置文件

                
 [root@HOST_RHEL5 ~]# cat /etc/udev/udev.conf 
 # udev.conf 

 # The initial syslog(3) priority: "err", "info", "debug" or its 
 # numerical equivalent. For runtime debugging, the daemons internal 
 # state can be changed with: "udevcontrol log_priority=<value>". 
 udev_log="err"


udev_log：syslog记录日志的级别，默认值是 err。如果改为 info 或者 debug 的话，会有冗长的 udev 日志被记录下来。

实际上在 RHEL5.3 里，除了配置文件里列出的参数 udev_log外，Linux 用户还可以修改参数 udev_root和 udev_rules( 请参考上面的“RHEL4.8 的 udev 配置文件”)，只不过这 2 个参数是不建议修改的，所以没显示在 udev.conf 里。

可见该版本的 udev.conf 改动不小：syslog默认会记录 udev 的日志，Linux 用户只能修改日志的级别 (err、info、degub 等 )；设备的权限不能在 udev.conf 里设定，而是要在规则文件 (*.rules) 里设定。

通过 udev 设定设备文件的权限

在 RHEL4.8 的 udev，设备的权限是通过权限文件来设置。

清单 5. RHEL4.8 下 udev 的权限文件

                
 [root@HOST_RHEL4 ~]# cat /etc/udev/permissions.d/50-udev.permissions 
……
 # disk devices 
 hd*:root:disk:0660 
 sd*:root:disk:0660 
 dasd*:root:disk:0660 
 ataraid*:root:disk:0660 
 loop*:root:disk:0660 
 md*:root:disk:0660 
 ide/*/*/*/*/*:root:disk:0660 
 discs/*/*:root:disk:0660 
 loop/*:root:disk:0660 
 md/*:root:disk:0660 

 # tape devices 
 ht*:root:disk:0660 
 nht*:root:disk:0660 
 pt[0-9]*:root:disk:0660 
 npt*:root:disk:0660 
 st*:root:disk:0660 
 nst*:root:disk:0660 
……


RHEL4.8 里 udev 的权限文件会为所有常用的设备设定权限和 ownership，如果有设备没有被权限文件设置权限，udev 就按照 udev.conf 里的默认权限值为这些设备设置权限。由于篇幅的限制，上图只显示了 udev 权限文件的一部分，该部分设 置了所有可能连接上的磁盘设备和磁带设备的权限和 ownership。

而在 RHEL5.3 的 udev，已经没有权限文件，所有的权限都是通过规则文件 (*.rules)来设置，在下面的规则文件配置过程会介绍到。

udev 的规则和规则文件

规则文件是 udev 里最重要的部分，默认是存放在 /etc/udev/rules.d/下。所有的规则文件必须以“.rules”为后缀名。RHEL 有默认的规则文件，这些默认规则文件不仅为设备产生内核设备名称，还会产生标识性强的符号链接。例如：

 [root@HOST_RHEL5 ~]# ls /dev/disk/by-uuid/ 
 16afe28a-9da0-482d-93e8-1a9474e7245c 


但这些链接名较长，不易调用，所以通常需要自定义规则文件，以此产生易用且标识性强的设备文件或符号链接。

此外，一些应用程序也会在 /dev/下产生一些方便调用的符号链接。例如规则 40-multipath.rules 为磁盘产生下面的符号链接：

 [root@ HOST_RHEL5 ~]# ls /dev/mpath/* 
 /dev/mpath/mpath0  /dev/mpath/mpath0p1  /dev/mpath/mpath0p2 


udev 按照规则文件名的字母顺序来查询全部规则文件，然后为匹配规则的设备管理其设备文件或文件链接。虽然 udev 不会因为一个设备匹配了一条规则而停止解析后面的规则文件，但是解析的顺序仍然很重要。通常情况下，建议让自己想要的规则文件最先被解析。比如，创建一个名为 /etc/udev/rules.d/10-myrule.rules的文件，并把你的规则写入该文件，这样 udev 就会在解析系统默认的规则文件之前解析到你的文件。

RHEL5.3 的 udev 规则文件比 RHEL4.8 里的更完善。受篇幅的限制，同时也为了不让大家混淆，本文将不对 RHEL4.8 里的规则文件进行详解，下面关于规则文件的配置和实例都是在 RHEL5.3 上进行的。如果大家需要配置 RHEL4 的 udev 规则文件，可以先参照下面 RHEL5.3 的配置过程，然后查询 RHEL4 里的用户手册 (man udev) 后进行配置。

在规则文件里，除了以“#”开头的行（注释），所有的非空行都被视为一条规则，但是一条规则不能扩展到多行。规则都是由多个 键值对（key-value pairs）组成，并由逗号隔开，键值对可以分为 条件匹配键值对( 以下简称“匹配键 ”) 和 赋值键值对( 以下简称“赋值键 ”)，一条规则可以有多条匹配键和多条赋值键。匹配键是匹配一个设备属性的所有条件，当一个设备的属性匹配了该规则里所有的匹配键，就认为这条规则生效，然后按照赋值键的内容，执行该规则的赋值。下面是一个简单的规则：

清单 6. 简单说明键值对的例子

                
 KERNEL=="sda", NAME="my_root_disk", MODE="0660"


KERNEL 是匹配键，NAME 和 MODE 是赋值键。这条规则的意思是：如果有一个设备的内核设备名称为 sda，则该条件生效，执行后面的赋值：在 /dev下产生一个名为 my_root_disk的设备文件，并把设备文件的权限设为 0660。

通过这条简单的规则，大家应该对 udev 规则有直观的了解。但可能会产生疑惑，为什么 KERNEL 是匹配键，而 NAME 和 MODE 是赋值键呢？这由中间的操作符 (operator) 决定。

仅当操作符是“==”或者“!=”时，其为匹配键；若为其他操作符时，都是赋值键。

    RHEL5.3 里 udev 规则的所有操作符：

    “==”：比较键、值，若等于，则该条件满足；

    “!=”： 比较键、值，若不等于，则该条件满足；

    “=”： 对一个键赋值；

    “+=”：为一个表示多个条目的键赋值。

    “:=”：对一个键赋值，并拒绝之后所有对该键的改动。目的是防止后面的规则文件对该键赋值。
    RHEL5.3 里 udev 规则的匹配键

    ACTION： 事件 (uevent) 的行为，例如：add( 添加设备 )、remove( 删除设备 )。

    KERNEL： 内核设备名称，例如：sda, cdrom。

    DEVPATH：设备的 devpath 路径。

    SUBSYSTEM： 设备的子系统名称，例如：sda 的子系统为 block。

    BUS： 设备在 devpath 里的总线名称，例如：usb。

    DRIVER： 设备在 devpath 里的设备驱动名称，例如：ide-cdrom。

    ID： 设备在 devpath 里的识别号。

    SYSFS{filename}： 设备的 devpath 路径下，设备的属性文件“filename”里的内容。

    例如：SYSFS{model}==“ST936701SS”表示：如果设备的型号为 ST936701SS，则该设备匹配该 匹配键。

    在一条规则中，可以设定最多五条 SYSFS 的 匹配键。

    ENV{key}： 环境变量。在一条规则中，可以设定最多五条环境变量的 匹配键。

    PROGRAM：调用外部命令。

    RESULT： 外部命令 PROGRAM 的返回结果。例如：

     PROGRAM=="/lib/udev/scsi_id -g -s $devpath", RESULT=="35000c50000a7ef67"


    调用外部命令 /lib/udev/scsi_id查询设备的 SCSI ID，如果返回结果为 35000c50000a7ef67，则该设备匹配该 匹配键。
    RHEL5.3 里 udev 的重要赋值键

    NAME：在 /dev下产生的设备文件名。只有第一次对某个设备的 NAME 的赋值行为生效，之后匹配的规则再对该设备的 NAME 赋值行为将被忽略。如果没有任何规则对设备的 NAME 赋值，udev 将使用内核设备名称来产生设备文件。

    SYMLINK：为 /dev/下的设备文件产生符号链接。由于 udev 只能为某个设备产生一个设备文件，所以为了不覆盖系统默认的 udev 规则所产生的文件，推荐使用符号链接。

    OWNER, GROUP, MODE：为设备设定权限。

    ENV{key}：导入一个环境变量。
    RHEL5.3 里 udev 的值和可调用的替换操作符

    在键值对中的键和操作符都介绍完了，最后是值 (value)。Linux 用户可以随意地定制 udev 规则文件的值。例如：my_root_disk, my_printer。同时也可以引用下面的替换操作符：

    $kernel, %k：设备的内核设备名称，例如：sda、cdrom。

    $number, %n：设备的内核号码，例如：sda3 的内核号码是 3。

    $devpath, %p：设备的 devpath路径。

    $id, %b：设备在 devpath里的 ID 号。

    $sysfs{file}, %s{file}：设备的 sysfs里 file 的内容。其实就是设备的属性值。
    例如：$sysfs{size} 表示该设备 ( 磁盘 ) 的大小。

    $env{key}, %E{key}：一个环境变量的值。

    $major, %M：设备的 major 号。

    $minor %m：设备的 minor 号。

    $result, %c：PROGRAM 返回的结果。

    $parent, %P：父设备的设备文件名。

    $root, %r：udev_root的值，默认是 /dev/。

    $tempnode, %N：临时设备名。

    %%：符号 % 本身。

    $$：符号 $ 本身。


    清单 7. 说明替换操作符的规则例子

                    
     KERNEL=="sd*", PROGRAM="/lib/udev/scsi_id -g -s %p", \
     RESULT=="35000c50000a7ef67", SYMLINK="%k_%c"


    该规则的执行：如果有一个内核设备名称以 sd 开头，且 SCSI ID 为 35000c50000a7ef67，则为设备文件产生一个符号链接“sda_35000c50000a7ef67”.

回页首

制定 udev 规则和查询设备信息的实例：

如何查找设备的信息 ( 属性 ) 来制定 udev 规则：

当我们为指定的设备设定规则时，首先需要知道该设备的属性，比如设备的序列号、磁盘大小、厂商 ID、设备路径等等。通常我们可以通过以下的方法获得：

    查询sysfs文件系统：

    前面介绍过，sysfs 里包含了很多设备和驱动的信息。

    例如：设备 sda 的 SYSFS{size} 可以通过 cat /sys/block/sda/size得到；SYSFS{model} 信息可以通过 cat /sys/block/sda/device/model得到。
    udevinfo命令：

    udevinfo 可以查询 udev 数据库里的设备信息。例如：用 udevinfo 查询设备 sda 的 model 和 size 信息：


    清单 8. 通过 udevinfo 查询设备属性的例子

                    
     [root@HOST_RHEL5 rules.d]# udevinfo -a -p /block/sda | egrep "model|size"
        SYSFS{size}=="71096640"
        SYSFS{model}=="ST936701SS      "


    其他外部命令：

    清单 9. 通过 scsi_id 查询磁盘的 SCSI_ID 的例子

                    
     [root@HOST_RHEL5 ~]# scsi_id -g -s /block/sda 
     35000c50000a7ef67 


udev 的简单规则：

清单 10. 产生网卡设备文件的规则

                
 SUBSYSTEM=="net", SYSFS{address}=="AA:BB:CC:DD:EE:FF", NAME="public_NIC"


该规则表示：如果存在设备的子系统为 net，并且地址 (MAC address) 为“AA:BB:CC:DD:EE:FF”，为该设备产生一个名为 public_NIC 的设备文件。

清单 11. 为指定大小的磁盘产生符号链接的规则

                
 SUBSYSTEM=="block", SYSFS{size}=="71096640", SYMLINK ="my_disk"


该规则表示：如果存在设备的子系统为 block，并且大小为 71096640(block)，则为该设备的设备文件名产生一个名为 my_disk 的符号链接。

清单 12. 通过外部命令为指定序列号的磁盘产生设备文件的规则

                
 KERNEL=="sd*[0-9]", PROGRAM=="/lib/udev/scsi_id -g -s %p", \
 RESULT=="35000c50000a7ef67", NAME +="root_disk%n"


该规则表示：如果存在设备的内核设备名称是以 sd 开头 ( 磁盘设备 )，以数字结尾 ( 磁盘分区 )，并且通过外部命令查询该设备的 SCSI_ID 号为“35000c50000a7ef67”，则产生一个以 root_disk 开头，内核号码结尾的设备文件，并替换原来的设备文件（如果存在的话）。例如：产生设备名 /dev/root_disk2，替换原来的设备名 /dev/sda2。

运用这条规则，可以在 /etc/fstab里保持系统分区名称的一致性，而不会受驱动加载顺序或者磁盘标签被破坏的影响，导致操作系统启动时找不到系统分区。

其他常用的 udev 命令：

    udevtest:

    udevtest会针对一个设备，在不需要 uevent 触发的情况下模拟一次 udev的运行，并输出查询规则文件的过程、所执行的行为、规则文件的执行结果。通常使用 udevtest来调试规则文件。以下是一个针对设备 sda 的 udevtest例子。由于 udevtest是扫描所有的规则文件 ( 包括系统自带的规则文件 )，所以会产生冗长的输出。为了让读者清楚地了解 udevtest，本例只在规则目录里保留一条规则：


    清单 13. 为 udevtest 保留的规则

                    
     KERNEL=="sd*", PROGRAM="/lib/udev/scsi_id -g -s %p", RESULT=="35000c50000a7ef67", \
     NAME="root_disk%n", SYMLINK="symlink_root_disk%n"




    清单 14. udevtest 的执行过程

                    
     [root@HOST_RHEL5 rules.d]# udevtest /block/sda 
     main: looking at device '/block/sda' from subsystem 'block'
     run_program: '/lib/udev/scsi_id -g -s /block/sda'
     run_program: '/lib/udev/scsi_id' (stdout) '35000c50000a7ef67'
     run_program: '/lib/udev/scsi_id' returned with status 0 
     udev_rules_get_name: reset symlink list 
     udev_rules_get_name: add symlink 'symlink_root_disk'
     udev_rules_get_name: rule applied, 'sda' becomes 'root_disk'
     udev_device_event: device '/block/sda' already in database, \
                      validate currently present symlinks 
     udev_node_add: creating device node '/dev/root_disk', major = '8', \
                minor = '0', mode = '0660', uid = '0', gid = '0'
     udev_node_add: creating symlink '/dev/symlink_root_disk' to 'root_disk'


    可以看出，udevtest对 sda 执行了外部命令 scsi_id, 得到的 stdout 和规则文件里的 RESULT 匹配，所以该规则匹配。然后 ( 模拟 ) 产生设备文件 /dev/root_disk和符号链接 /dev/symlink_root_disk，并为其设定权限。
    start_udev:

    start_dev命令重启 udev守护进程，并对所有的设备重新查询规则目录下所有的规则文件，然后执行所匹配的规则里的行为。通常使用该命令让新的规则文件立即生效：


    清单 15. start_udev 的执行过程

                    
     [root@HOST_RHEL5 rules.d]# start_udev 
     Starting udev:                                             [  OK  ] 


    start_udev一般没有标准输出，所有的 udev 相关信息都按照配置文件 (udev.conf)的参数设置，由 syslog记录。

回页首

小结：

udev 是高效的设备管理工具，其最大的优势是动态管理设备和自定义设备的命名规则，因此替代 devfs 成为 Linux 默认的设备管理工具。通过阅读本文，Linux 用户能够了解到 udev 的工作原理和流程，灵活地运用 udev 规则文件，从而方便地管理 Linux 设备文件。
