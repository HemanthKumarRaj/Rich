http://namor.userpage.fu-berlin.de/howto_fbsd9_encrypted_ufs.html


Installing FreeBSD 9.0 with encrypted root fs (all ufs)
Keywords

    Freebsd 9.0 (beta 1 used here)
    Encrypted Root
    UFS
    /boot unencrypted
    GPT

Introduction

Disc encryption protects the computer from physical data theft. If you laptop's stolen, you have some protection against you data getting in the wrong hands.

The Hardware is use is rather old. The system has only 512G RAM and a 32 bit CPU, so ZFS is out of the question. The filesystem being used will be UFS.
Preparation

    download and burn the disk1 cd image. (alternatively, you could use an USB image, but my old hardware doesn't like those)
    start the installation

Installation

With Freebsd 9, sysinstall is gone and replaced by bsdinstall. This makes installations with disk encryption a bit easier. Mostly, because the life environment is easier to use. (loading modules an such)

Also, we don't have to do everything from the live environment. Just the partitioning and some tweaks with the configs in the end.

(Note: With bsdinstall you can just press 'enter' to accept a screen)

    In the "Welcome" menu, choose "Install"
    Choose your keyboard layout
    Type in your hostname
    Choose the optional system components as you wish
    When it comes to disk partitioning, choose "Shell" (key 's')

setup information

The disk we use for the whole system is 'ada0'. We'll use gpt labels to make sure everything runs smooth if we decide to change or add some hardware later.
partitioning

Kernel modules get loaded automagically when we need them, so we can jump into action right away. What we need to do is:

    create gpt partition scheme
    create boot block
    create and format boot partition
    create a swap partition
    create and init encrypted volume
    format encrypted volume
    mount file systems to /mnt
    continue installation

(1) create boot block

# gpart show
# gpart destroy -F ada0
# gpart create -s gpt ada0

(2) create boot block

# gpart add -t freebsd-boot -s 64k ada0
# gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 ada0

(3) create and format boot partition

# gpart add -t freebsd-ufs -s 512m -l boot ada0
# newfs -O2 -U -m 0 -j /dev/ada0p2 		          OR        newfs -O2 -U -m 0 -j gpt/boot
  (Note: we use the label 'boot' here)
  
(4) create a swap partition.  This will be encrypted during boot with a one-time 256bit key.

# gpart add -s 2G -t freebsd-swap ada0

(5) create and init encrypted volume

# gpart add -t freebsd-ufs -l enc ada0
  (Note: it's not an ufs volume, but a geli volume,
         dunno how to properly 'type' such a partition)
# geli init -bl 256 /dev/ada0p4        OR   geli init -bl 256 gpt/enc
  (set your password now)
# geli attach /dev/ada0p4              OR   geli attach gpt/enc

(5) format enrypted volume

# newfs -O2 -U -j -m 6 /dev/ada0p4.eli          OR         newfs -U gpt/enc.eli 
  (note the .eli !!!)

(6) mount file systems to /mnt

# mount /dev/ada0p4.eli  /mnt         OR               mount /dev/gpt/enc.eli  /mnt
# mkdir /mnt/bootdir
# mount /dev/ada0p2  /mnt/bootdir
# mkdir /mnt/bootdir/boot
# cd /mnt
# ln -s bootdir/boot

(7) continue installation

# exit

The installation of the distribution sets will run now. Time to make a cup of coffee (on my hardware, at least).

Note: At some point here the screen was messed up by some debugging messages. First, i though it's a kernel panic, but somewhere on the screen things changed (progress bar was at 8 places, hard to describe..). Luckily, the installation continued and when i had to enter to root password, the screen was fine again. :-D
Config files

When you are at the screen "Final Configuration", where you can get back to dialogs from before, you should choose "Shell" to change the config files. This will bring us in a chroot of our installed system.

The files we need to visit are fstab(5) and loader.conf(5).
loader.conf

# vi /boot/loader.conf					(Can cat the example file  /boot/default/loader.conf)
  (note: the file didn't exist for me)

Now add the following lines:

geom_eli_load="YES"
aesni_load="YES"
vfs.root.mountfrom="ufs:/dev/ada0p4.eli"

Note: You MUST put the right side of the = in apostrophes. The file won't parse otherwise!!!
fstab.conf


Now we need to tell the system to encrypt our swap space using a one-time key on each boot (note: this prevents system dumps from working)

#  vi /etc/rc.conf
Add the following line:
    geli_swap_flags="-e AES-XTS -l 256 -s 4096 -d"
	
# vi /etc/fstab

Add the following lines:

    # Device                   Mountpoint FStype Options Dump Pass#
    /dev/ada0p4.eli   /              ufs    rw      0    0
    /dev/ada0p2       /boot          ufs    rw      1    1
    /dev/ada0p3.eli   none           swap   sw      0    0

-----------------------------------------------------------
# /dev/gpt/boot    /boot2   ufs    rw,noatime    1    1
# /dev/gpt/enc.eli /        ufs    rw,noatime    1    1
-----------------------------------------------------------
Finishing

We're done. but need the bootdir name to boot
umount /dev/ada0p2
mv /mnt/bootdir /mnt/boot

To reboot, enter:

# exit

and choose "Exit" (key 'e'). Then "Reboot" (key 'r').
Useful tips

If your installation failed at some point and you need to make changes to the installed system from a life cd, having a wrong keyboard layout drives you insane. For german folks:

# kbdcontrol -l german.iso





____________________________________________________________________________________________________________________________
https://www.dan.me.uk/blog/2012/05/05/full-disk-encryption-in-freebsd-9-x-well-almost/


Full disk encryption in FreeBSD 9.x (well, almost!)

This article will tell you how to fully encrypt your hard disk in FreeBSD 9.x.  When I say ‘fully’, I mean as close as possible.  It will leave the bootloader and /boot folder unencrypted, but everything else will be encrypted (including your swap space).  Basically, all your data is encrypted and that’s the point…

Boot from any FreeBSD 9 install medium (except bootonly), and choose Live CD at the installer menu.

For this article, I will assume you’re using the /dev/ada0 disk, a 10GB /boot, a 4GB swap and remaining disk encrypted.  The contents will be encrypted using AES-XTS 256-bit encryption  with a 4 kilobit random data partial key and a passphrase (required to type on boot).  This method requires no external data (no USB sticks, no bootable CDs to boot the OS) – but does not offer two factor authentication which is better than this method.  For general encryption needs, this method is more than sufficient.

Note that more recent CPUs support AESNI flag for offloading. As GELI uses the crypto(4) framework, the OS will utilise this function of your CPU to assist the encryption to decrease CPU load.

First, we need to remove any existing GPT or MBR partition tables on the disk – ignore any ‘invalid argument’ messages you get at this stage:

    gpart destroy -F ada0

Now we need to initialise a new GPT partition table, as follows:

    gpart create -s gpt ada0

We will now create a 64kb boot partition (this contains the boot loader only, so is safe and required to be unencrypted):

    gpart add -s 128 -t freebsd-boot ada0

Next, we will create the /boot partition – you can adjust the sizes here if you need, but i’d suggest not shrinking it too much or you’ll get into problems when doing OS upgrades later…

    gpart add -s 10G -t freebsd-ufs ada0

Now for a swap partition.  Again, you can adjust the size if needed.  This will be encrypted during boot with a one-time 256bit key.

    gpart add -s 4G -t freebsd-swap ada0

Finally, we assign the remaining data to a partition.  This will form the entire disk (excluding /boot) and will be encrypted shortly.

    gpart add -t freebsd-ufs ada0

OK, so we’ve created… ada0p1 (bootloader), adap2 (unencrypted /boot partition), adap3 (swap partition) and adap4 (encrypted disk partition).  We need to write the boot loader to the disk now:

    gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 ada0

Now we need to format the /boot partition:

    newfs -O2 -U -m 0 -j /dev/ada0p2

And temporarily mount it as /mnt:

    mount /dev/ada0p2 /mnt

Now we will create a 4kb random data file that will form part of the encryption key:

    dd if=/dev/random of=/mnt/encryption.key bs=4096 count=1

Now we’re in a position to encrypt the main disk.  This part will ask for a passphrase twice to complete:

    kldload geom_eli
    geli init -a HMAC/SHA256 -b -B /mnt/ada0p4.eli -e AES-XTS -K /mnt/encryption.key -l 256 -s 4096 /dev/ada0p4
    geli attach -k /mnt/encryption.key /dev/ada0p4

You will receive some messages on the console about checksum mismatches – this is normal and please ignore them.

If you have time, I recommend writing the entire disk with random data to initialise the checksums.  This is a VERY time consuming step – you can skip it if you wish, but it is recommended:

    dd if=/dev/random of=/dev/ada0p4.eli bs=1m

Next we will unmount the old parition so we can mount the new “root" after formatting  (and re-mount the /boot partition too):

    umount /mnt
    newfs -O2 -U -j -m 6 /dev/ada0p4.eli
    mount /dev/ada0p4.eli /mnt
    mkdir /mnt/bootdir
    mount /dev/ada0p2 /mnt/bootdir

OK, we’re ready to install the OS files onto the disk now… We will install the base, kernel, src and ports tarballs as follows:

    cd /mnt
    unxz -c /usr/freebsd-dist/base.txz | tar xpf -
    unxz -c /usr/freebsd-dist/kernel.txz | tar xpf -
    unxz -c /usr/freebsd-dist/src.txz | tar xpf -
    unxz -c /usr/freebsd-dist/ports.txz | tar xpf -

Note: this can take a while (especially the ports extraction) so please be patient.  If you’d like to see some kind of progress, change the “xpf" to “xvpf" and it will scroll the files to the screen as they are extracted.

Now we have to move the /boot folder to the unencrypted partition (it’s really not much use if it’s encrypted!) – we will also move the keyfile and backup file into the /boot folder:

    mv boot bootdir/
    ln -fs bootdir/boot
    mv encryption.key ada0p4.eli bootdir/boot/

Now we need to prepare a few things in the installed OS – so we will chroot into the folder:

    chroot /mnt

We need to tell the boot loader to load kernel modules for decryption, and also tell it about the keyfile for the partition… edit the file /boot/loader.conf and enter the following:

    vfs.root.mountfrom="ufs:/dev/ada0p4.eli"
    aesni_load="YES"
    geom_eli_load="YES"
    geli_ada0p4_keyfile0_load="YES"
    geli_ada0p4_keyfile0_type="ada0p4:geli_keyfile0″
    geli_ada0p4_keyfile0_name="/boot/encryption.key"

Now we need to tell the system to encrypt our swap space using a one-time key on each boot (note: this prevents system dumps from working)… edit /etc/rc.conf and enter:

    geli_swap_flags="-e AES-XTS -l 256 -s 4096 -d"

Next we need to tell the system our mountpoints… edit the file /etc/fstab and enter:

    # Device                   Mountpoint FStype Options Dump Pass#
    /dev/ada0p4.eli   /                   ufs    rw      0    0
    /dev/ada0p2         /bootdir   ufs    rw      1    1
    /dev/ada0p3.eli   none           swap   sw      0    0

Now we need to initialise a few things… let’s start by setting the root password:

    passwd root

And configuring your timezone:

    tzsetup

And initialise the sendmail aliases file:

    cd /etc/mail
    make aliases

You can do any other system setup you need now, such as adding users, configuring SSH or networking…  when you’re done:

    exit

Now we’re done, we can reboot…

    reboot

On boot, you will see a prompt for:

    Enter passphrase for ada0p4:

Note, however, that devices are still being detected while this occurs so it may scroll off the screen (usually while detecting USB devices) – this doesn’t affect your ability to enter the passphrase, but can be confusing if you’re not expecting it!

Once the system is up and running, you can use it as normal.

The only point to note is that when you do an OS upgrade, during the “mergemaster" stage, it will complain that /boot is a symlink not a directory.  Simply tell it to ignore/do nothing and it will install the files as normal.
